#NoEnv  ; Recommended for performance and compatibility with future AutoHotkey releases.
; #Warn  ; Enable warnings to assist with detecting common errors.
SendMode Input  ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir%  ; Ensures a consistent starting directory.

RandomBezier( X0, Y0, Xf, Yf, O="" ) {
    Time := RegExMatch(O,"i)T(\d+)",M)&&(M1>0)? M1: 200
    RO := InStr(O,"RO",0) , RD := InStr(O,"RD",0)
    N:=!RegExMatch(O,"i)P(\d+)(-(\d+))?",M)||(M1<2)? 2: (M1>19)? 19: M1
    If ((M:=(M3!="")? ((M3<2)? 2: ((M3>19)? 19: M3)): ((M1=="")? 5: ""))!="")
        Random, N, %N%, %M%
    OfT:=RegExMatch(O,"i)OT(-?\d+)",M)? M1: 100, OfB:=RegExMatch(O,"i)OB(-?\d+)",M)? M1: 100
    OfL:=RegExMatch(O,"i)OL(-?\d+)",M)? M1: 100, OfR:=RegExMatch(O,"i)OR(-?\d+)",M)? M1: 100
    MouseGetPos, XM, YM
    If ( RO )
        X0 += XM, Y0 += YM
    If ( RD )
        Xf += XM, Yf += YM
    If ( X0 < Xf )
        sX := X0-OfL, bX := Xf+OfR
    Else
        sX := Xf-OfL, bX := X0+OfR
    If ( Y0 < Yf )
        sY := Y0-OfT, bY := Yf+OfB
    Else
        sY := Yf-OfT, bY := Y0+OfB
    Loop, % (--N)-1 {
        Random, X%A_Index%, %sX%, %bX%
        Random, Y%A_Index%, %sY%, %bY%
    }
    X%N% := Xf, Y%N% := Yf, E := ( I := A_TickCount ) + Time
    While ( A_TickCount < E ) {
        U := 1 - (T := (A_TickCount-I)/Time)
        Loop, % N + 1 + (X := Y := 0) {
            Loop, % Idx := A_Index - (F1 := F2 := F3 := 1)
                F2 *= A_Index, F1 *= A_Index
            Loop, % D := N-Idx
                F3 *= A_Index, F1 *= A_Index+Idx
            M:=(F1/(F2*F3))*((T+0.000001)**Idx)*((U-0.000001)**D), X+=M*X%Idx%, Y+=M*Y%Idx%
        }
        MouseMove, %X%, %Y%, 0
        Sleep, 1
    }
    MouseMove, X%N%, Y%N%, 0
    Return N+1
}



Movedrop(x, y) {
	RandomBezier( 0, 0, x, y, "T250 RO OT1 OB1 OL1 OR1 P2-4" )
}
Move(x, y) {
	Random, OvershootChance, 1, 3
	Random, OvershootRand, 20, 50
	Random, BezierType, 1, 4
	Random, BezierSpeed, 750,1500
	MouseGetPos, varX, varY

	if (varX > x) 
		overshootX := x-OvershootRand
	else
		overshootX := x+OvershootRand

	if (varY > y)
		overshootY := y-OvershootRand
	else 
		overshootY := y+OvershootRand

	if (BezierType <= 3) {
		if (OvershootChance <= 3) {
			RandomBezier( 0, 0, x, y, "T1250 RO OT3 OB5 OL3 OR1 P3-6" )
		}
		else {
			RandomBezier( 0, 0, overshootX, overshootY, "T750 RO OT3 OB5 OL3 OR1 P4-7" )
			RandomBezier( 0, 0, x, y, "T1250 RO OT3 OB5 OL3 OR1 P3-6" )
		}
	}
	else {
		if (OvershootChance <= 3) {
			RandomBezier( 0, 0, x, y, "T1250 RO OT15 OB15 OL15 OR15 P5-8")	
	}
		else {
			RandomBezier( 0, 0, overshootX, overshootY, "T1250 RO OT10 OB10 OL10 OR10 P9-2")
			RandomBezier( 0, 0, x, y, "T1250 RO OT15 OB15 OL15 OR15 P5-8")
		}
	}
}

sleep(x, y) {
	random, rand, x, y
	sleep, %rand%
}

^1::
	MouseGetPos, bankchestX, bankchestY
	SoundBeep
	Return
^2::
	MouseGetPos, conveyorX, conveyorY
	SoundBeep 
	Return
^3::
	MouseGetPos, conveyorX2, conveyorY2
	SoundBeep
	Return
^4::
	MouseGetPos, dispenserX, dispenserY
	SoundBeep
	Return
^5::
	MouseGetPos, bankchestX2, bankchestY2
	SoundBeep
	Return
^6::
	MouseGetPos, dispensersafeX, dispensersafeY
	SoundBeep
	Return
^7::
	MouseGetPos, dispensersafeX2, dispensersafeY2
	SoundBeep
	Return

F9::Pause, Toggle
F10::Reload

F2::
ControlClick, x%bankchestX% y%bankchestY% ahk_exe Bluestacks.exe
Return

F5::
	count := 0
	loop {
	Gosub, Stamina
	Sleep(1000,1200)
	loop 4 {
	Random, pixelx, -2,2
	Random, pixely, -2,2


	if (count = 0) {
		bankchestXnew := bankchestX+pixelx
		bankchestYnew := bankchestY+pixely
		Click, %bankchestXnew%, %bankchestYnew%
	}	

	Gosub, Bankitems
	Sleep(1000,1200)
	Gosub, Conveyor
	Sleep(1000,1200)
	GoSub, Dispenser
	Sleep(400,600)
	GoSub, Clickbank
	Sleep(4500,5000)
	}
}
Return

Stamina:

	Random, staminax, 345, 362
	Random, staminay, 287, 304
	Random, staminainvx, 729, 749
	Random, staminainvy, 269, 284
	Random, pixelx, -2,2
	Random, pixely, -2,2
	if (count <= 0) {
	bankchestXnew := bankchestX+pixelx
	bankchestYnew := bankchestY+pixely
	Click, %bankchestXnew%, %bankchestYnew%
	}
	Sleep(1300,1500)
	Random, staminainvx, 729, 749
	Random, staminainvy, 269, 284
	Click, %staminainvx%, %staminainvy%
	Sleep(1000,1200)
	Click, %staminax%, %staminay%
	Sleep(1000,1200)
	Send {Escape}
	Sleep(1000,1200)
	Click, %staminainvx%, %staminainvy%
	sleep(1000,1200)
	
	if (Count > 0) {
	Random, pixelx, -2,2
	Random, pixely, -2,2
	bankchestXnew := bankchestX+pixelx
	bankchestYnew := bankchestY+pixely
	Click, %bankchestXnew%, %bankchestYnew%
}
	/*
	Sleep(1000,1200)
	Random, staminainvx, 729, 749
	Random, staminainvy, 269, 284
	Click, %staminax%, %staminay%
	Sleep(1000,1200)
	Send {Escape}
	*/
	Return

Bankitems:
	Random, pixelx, -2,2
	Random, pixely, -2,2

	Random, ironx, 200, 218
	Random, irony, 285, 298
	Random, coalx, 250, 267
	Random, coaly, 284, 299
	Random, coalinvx, 729, 749
	Random, coalinvy, 269, 284
	Random, baginvx, 691, 705
	Random, baginvy, 268, 285 
	Random, depositallx, 554, 577
	Random, depositally, 497, 517

	loop {
		Sleep(100,200)
		PixelSearch, Px, Py, 481, 421, 574, 489, 0xA81B0D, 1, RGB fast
		} until (ErrorLevel = 0)
	Sleep(200,400)

	Click, %depositallx%, %depositally%
	
	Sleep(800,1000)

	Click, %coalx%, %coaly%

	Sleep(800,1000)

	Send {Escape}

	Sleep(800,1000)

	Click, %baginvx%, %baginvy%

	Sleep(800,1000)

	bankchestXnew2 := bankchestX+pixelx
	bankchestYnew2 := bankchestY+pixelx
	Click, %bankchestXnew2%, %bankchestYnew2%

	loop {
	Sleep(100,200)
	PixelSearch, Px, Py, 481, 421, 574, 489, 0xA81B0D, 1, RGB fast
	} until (ErrorLevel = 0)
	Sleep(200,400)
	Click, %ironx%, %irony%

	Sleep(800,1000)

	Send {Escape}
	Return

Conveyor:


	Random, pixelx, -2,2
	Random, pixely, -2,2
	Random, baginvx, 692, 705
	Random, baginvy, 270, 285 
	Random, emptyx, -30,10
	Random, emptyy, 132, 136

	conveyorXnew := conveyorX+pixelx
	conveyorYnew := conveyorY+pixely
	Click, %conveyorXnew%, %conveyorYnew%

	Sleep(1500,2000) 

	coalbagx := 698+pixelx
	coalbagy := 280+pixely

	Click, %coalbagx%, %coalbagy%, 0
	Sleep(100,200)
	Click, Down

	Sleep(1500,2000)

	Click, Up


	loop {
		Sleep(200,400)
		PixelSearch, Px, Py, 806, 478, 848, 510, 0x371F15, 1, RGB fast
		} until (ErrorLevel = 1)

	Sleep(300,500)
	Random, emptyxnew, 679, 745
	Random, emptyynew, 408, 418
	Click, %emptyxnew%, %emptyynew%
	
	Sleep(700,1000)

	conveyorX2new := conveyorX2+pixelx
	conveyorY2new := conveyorY2+pixelx
	Click, %conveyorX2new%, %conveyorY2new%
	Return

Dispenser:


	Random, steelbarx, -5, 5
	Random, steelbary, -5, 5
	Random, pixelx, -2,2
	Random, pixely, -2,2
	count2 := 0

	loop 70{
		Sleep 100
		PixelSearch, Px, Py,  627, 82, 673, 97, 0xFFFFFF, 100, RGB fast
	} Until (ErrorLevel = 0)

	Sleep(400,600)
	dispenserXnew := dispenserX+pixelx
	dispenserYnew := dispenserY+pixely

	Move(dispenserXnew, dispenserYnew)


 
	Sleep(400,600)
	Click
	/*
	loop 30{
		Sleep 100
		PixelSearch, Px, Py,  627, 82, 673, 97, 0xFFFFFF, 100, RGB fast
		if (ErrorLevel = 0) 
			Goto, postloop
	} 
	Sleep(1700,2000)

	postloop:
	*/

	ironbar:
	Sleep(500,700) 
	Loop 16 {
		Sleep(600,800)
		PixelSearch, Px, Py, 227, 108, 312, 167, 0x847A7A, 3, RGB fast
		if (ErrorLevel = 0) {
			steelbarxnew := Px+steelbarx
			steelbarynew := Py+steelbary
			Click, %steelbarxnew%, %steelbarynew%
			goto, postloop2
			Break
		}
		else {
			Sleep, 10
		}
	}
	Click, %dispensersafeX%, %dispensersafeY%
	Sleep(2000,2500)	
	Click, %dispensersafeX2%, %dispensersafeY2%
		Loop {
		Sleep(600,800)
		PixelSearch, Px, Py, 227, 108, 312, 167, 0x847A7A, 3, RGB fast
		if (ErrorLevel = 0) {
			steelbarxnew := Px+steelbarx
			steelbarynew := Py+steelbary
			Click, %steelbarxnew%, %steelbarynew%
			goto, postloop2
			Break
		}
		else {
			Sleep, 10
		}
	}
	postloop2:
	Return

Clickbank:
	Random, pixelx, -2,2
	Random, pixely, -2,2
	Count++
	clickchestXnew := bankchestX2+pixelx
	clickchestYnew := bankchestY2+pixelx
	Click, %clickchestXnew%, %clickchestYnew%
	Return
